<style>
  .stories-container {
    display: flex;
    gap: 16px;
    overflow-x: auto;
    padding: 10px 0;
    scrollbar-width: none; /* Hide scrollbar for Firefox */
  }
  
  .stories-container::-webkit-scrollbar {
    display: none; /* Hide scrollbar for Chrome/Safari */
  }
  
  .story-item {
    flex: 0 0 auto;
    width: 100px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
  }
  
  .story-video {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid #3e0080;
    cursor: pointer;
  }
  
  .story-video video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Modal styles */
  .modal-backdrop {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(69 69 69 / 90%);
    z-index: 1000;
  }
  
  .video-modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 23%;
    height:500px;
    z-index: 1001;
    background: #000;
    
    overflow: hidden;
  }
  
  .modal-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: #000;
  }
  
  .close-modal {
    position: absolute;
    top: 13px;
    right: 0px;
    color: white;
    font-size: 24px;
    background: rgba(0, 0, 0, 0.5);
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
  }
  
  .story-nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 30px;
    height: 30px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border: none;
    z-index: 10;
  }
  
  .story-nav-prev {
    left: 10px;
  }
  
  .story-nav-next {
    right: 10px;
  }
  
  /* Product info box */
  .product-info-box {
    position: absolute;
    bottom: 17px;
    left: 30px;
    right: 30px;
    background: white;
    padding: 7px;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .product-info-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .product-info-content {
    flex: 1;
  }
  
  .product-info-title {
    font-size: 8px;
    font-weight: bold;
    margin: 0 0 2px 0;
  }
  
  .product-info-price {
    font-size: 10px;
    color: #3e0080;
    font-weight: bold;
    margin: 0 0 2px 0;
  }
  
  .product-info-btn {
    background: #3e0080;
    color: white;
    border: none;
    padding: 5px 9px;
    font-size: 10px;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .product-nav-arrow {
    background: #f0f0f0;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    
  }
  
  .product-counter {
    font-size: 12px;
    color: #666;
    margin-left: 10px;
    display:none
  }
  
  .progress-container {
    position: absolute;
    top: 10px;
    left: 10px;
    right: 10px;
    height: 3px;
    background: rgba(0, 0, 0, 0.7);
    z-index: 10;
  }
  
  .progress-bar {
    height: 100%;
    background: white;
    width: 0%;
    transition: width 0.1s linear;
  }
  
  .mute-btn {
    position: absolute;
    top: 13px;
    right: 0px;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
  }
</style>

<div class="stories-container" id="stories-container">
  <p id="loading-text">Loading stories...</p>
</div>

<!-- Modal Structure -->
<div class="modal-backdrop" id="modalBackdrop"></div>
<div class="video-modal" id="videoModal">
  <button class="close-modal">&times;</button>
  <div class="progress-container">
    <div class="progress-bar" id="progressBar"></div>
  </div>
  <button class="mute-btn" id="muteBtn">ðŸ”Š</button>
  <button class="story-nav-arrow story-nav-prev" id="storyNavPrev">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="story-nav-arrow story-nav-next" id="storyNavNext">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  <video class="modal-video" id="modalVideo" playsinline></video>
  <div class="product-info-box" id="productInfoBox">
    <button class="product-nav-arrow" id="productNavPrev">
      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <img class="product-info-image" id="productInfoImage" src="" alt="Product">
    <div class="product-info-content">
      <h3 class="product-info-title" id="productInfoTitle"></h3>
      <p class="product-info-price" id="productInfoPrice"></p>
      <button class="product-info-btn" id="productInfoBtn">Add to Cart</button>
    </div>
    <button class="product-nav-arrow" id="productNavNext">
      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
      </svg>
    </button>
    <div class="product-counter" id="productCounter"></div>
  </div>
</div>

<script>
  // Global variables
  let allStories = [];
  let currentStoryIndex = 0;
  let productsData = [];
  let currentProductIndex = 0;
  let touchStartX = 0;
  let touchEndX = 0;
  
  // DOM elements
  const storiesContainer = document.getElementById('stories-container');
  const modalBackdrop = document.getElementById('modalBackdrop');
  const videoModal = document.getElementById('videoModal');
  const modalVideo = document.getElementById('modalVideo');
  const progressBar = document.getElementById('progressBar');
  const muteBtn = document.getElementById('muteBtn');
  const storyNavPrev = document.getElementById('storyNavPrev');
  const storyNavNext = document.getElementById('storyNavNext');
  const productInfoBox = document.getElementById('productInfoBox');
  const productInfoImage = document.getElementById('productInfoImage');
  const productInfoTitle = document.getElementById('productInfoTitle');
  const productInfoPrice = document.getElementById('productInfoPrice');
  const productInfoBtn = document.getElementById('productInfoBtn');
  const productNavPrev = document.getElementById('productNavPrev');
  const productNavNext = document.getElementById('productNavNext');
  const productCounter = document.getElementById('productCounter');

  // Load stories from API
  async function loadStories() {
    try {
      const response = await fetch('https://booth-telephony-sacred-nearly.trycloudflare.com/app/proxy');
      const data = await response.json();
      allStories = Array.isArray(data) ? data : data.data || [];
      
      if (allStories.length === 0) {
        storiesContainer.innerHTML = '<p>No stories found.</p>';
        return;
      }
      
      document.getElementById('loading-text')?.remove();
      
      allStories.forEach((story, index) => {
        const storyItem = document.createElement('div');
        storyItem.className = 'story-item';
        
        const videoContainer = document.createElement('div');
        videoContainer.className = 'story-video';
        
        const video = document.createElement('video');
        video.src = story.url;
        video.muted = true;
        video.loop = true;
        video.autoplay = true;
        video.playsInline = true;
        
        videoContainer.appendChild(video);
        videoContainer.addEventListener('click', () => openModal(index));
        
        storyItem.appendChild(videoContainer);
        storiesContainer.appendChild(storyItem);
      });
    } catch (error) {
      console.error('Error loading stories:', error);
      storiesContainer.innerHTML = '<p>Error loading stories. Please try again.</p>';
    }
  }
  
  // Open modal with selected story
  async function openModal(index) {
    currentStoryIndex = index;
    const story = allStories[currentStoryIndex];
    
    // Reset modal
    modalVideo.src = story.url;
    modalVideo.muted = true;
    muteBtn.textContent = 'ðŸ”‡';
    progressBar.style.width = '0%';
    
    // Load products for this story
    await loadProductsForStory(story);
    
    // Show modal
    modalBackdrop.style.display = 'block';
    videoModal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // Play video
    modalVideo.play().catch(e => console.log('Autoplay prevented:', e));
    
    // Update navigation arrows
    storyNavPrev.style.display = currentStoryIndex === 0 ? 'none' : 'flex';
    storyNavNext.style.display = currentStoryIndex === allStories.length - 1 ? 'none' : 'flex';
    
    // Add event listeners
    modalVideo.addEventListener('timeupdate', updateProgress);
    modalVideo.addEventListener('ended', handleVideoEnd);
    modalBackdrop.addEventListener('click', closeModal);
    muteBtn.addEventListener('click', toggleMute);
    storyNavPrev.addEventListener('click', navigateToPrevStory);
    storyNavNext.addEventListener('click', navigateToNextStory);
    productNavPrev.addEventListener('click', navigateToPrevProduct);
    productNavNext.addEventListener('click', navigateToNextProduct);
    productInfoImage.addEventListener('click', openProductPage);
    productInfoBtn.addEventListener('click', addToCart);
    document.addEventListener('keydown', handleKeyDown);
    
    // Touch events for swipe navigation
    videoModal.addEventListener('touchstart', handleTouchStart, false);
    videoModal.addEventListener('touchend', handleTouchEnd, false);
  }
  
  // Close modal
  function closeModal() {
    modalVideo.pause();
    modalBackdrop.style.display = 'none';
    videoModal.style.display = 'none';
    document.body.style.overflow = 'auto';
    
    // Remove event listeners
    modalVideo.removeEventListener('timeupdate', updateProgress);
    modalVideo.removeEventListener('ended', handleVideoEnd);
    modalBackdrop.removeEventListener('click', closeModal);
    muteBtn.removeEventListener('click', toggleMute);
    storyNavPrev.removeEventListener('click', navigateToPrevStory);
    storyNavNext.removeEventListener('click', navigateToNextStory);
    productNavPrev.removeEventListener('click', navigateToPrevProduct);
    productNavNext.removeEventListener('click', navigateToNextProduct);
    productInfoImage.removeEventListener('click', openProductPage);
    productInfoBtn.removeEventListener('click', addToCart);
    document.removeEventListener('keydown', handleKeyDown);
    videoModal.removeEventListener('touchstart', handleTouchStart, false);
    videoModal.removeEventListener('touchend', handleTouchEnd, false);
  }
  
  // Load products for current story
  async function loadProductsForStory(story) {
    productsData = [];
    currentProductIndex = 0;
    
    if (!story.productLinks || story.productLinks.length === 0) {
      productInfoBox.style.display = 'none';
      return;
    }
    
    try {
      // Load all products
      const productPromises = story.productLinks.map(async (link) => {
        try {
          const product = await fetchProductByHandle(link.handle);
          return {
            ...product,
            timestamp: link.timestamp
          };
        } catch (error) {
          console.error('Error loading product:', error);
          return null;
        }
      });
      
      productsData = (await Promise.all(productPromises)).filter(Boolean);
      
      if (productsData.length > 0) {
        productInfoBox.style.display = 'flex';
        updateProductInfo();
      } else {
        productInfoBox.style.display = 'none';
      }
    } catch (error) {
      console.error('Error loading products:', error);
      productInfoBox.style.display = 'none';
    }
  }
  
  // Fetch product data by handle
  async function fetchProductByHandle(handle) {
    const response = await fetch(`/products/${handle}.js`);
    const product = await response.json();
    const firstVariant = product.variants?.[0];
    
    return {
      title: product.title,
      featured_image: product.featured_image || '',
      url: `/products/${handle}`,
      price: (firstVariant?.price / 100).toFixed(2),
      variantId: firstVariant?.id
    };
  }
  
  // Update product info in modal
  function updateProductInfo() {
    if (productsData.length === 0) return;
    
    const product = productsData[currentProductIndex];
    productInfoImage.src = product.featured_image;
    productInfoTitle.textContent = product.title;
    productInfoPrice.textContent = `$${product.price}`;
    productInfoBtn.dataset.variantId = product.variantId;
    
    // Update product counter
    productCounter.textContent = `${currentProductIndex + 1}/${productsData.length}`;
    
    // Show/hide navigation arrows
    productNavPrev.style.display = currentProductIndex === 0 ? 'none' : 'flex';
    productNavNext.style.display = currentProductIndex === productsData.length - 1 ? 'none' : 'flex';
  }
  
  // Update progress bar
  function updateProgress() {
    if (modalVideo.duration) {
      const percent = (modalVideo.currentTime / modalVideo.duration) * 100;
      progressBar.style.width = `${percent}%`;
    }
  }
  
  // Handle video end
  function handleVideoEnd() {
    if (currentStoryIndex < allStories.length - 1) {
      navigateToNextStory();
    } else {
      closeModal();
    }
  }
  
  // Toggle mute
  function toggleMute() {
    modalVideo.muted = !modalVideo.muted;
    muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
  }
  
  // Navigate to previous story
  function navigateToPrevStory(e) {
    if (e) e.stopPropagation();
    if (currentStoryIndex > 0) {
      currentStoryIndex--;
      openModal(currentStoryIndex);
    }
  }
  
  // Navigate to next story
  function navigateToNextStory(e) {
    if (e) e.stopPropagation();
    if (currentStoryIndex < allStories.length - 1) {
      currentStoryIndex++;
      openModal(currentStoryIndex);
    } else {
      closeModal();
    }
  }
  
  // Navigate to previous product
  function navigateToPrevProduct(e) {
    e.stopPropagation();
    if (currentProductIndex > 0) {
      currentProductIndex--;
      updateProductInfo();
    }
  }
  
  // Navigate to next product
  function navigateToNextProduct(e) {
    e.stopPropagation();
    if (currentProductIndex < productsData.length - 1) {
      currentProductIndex++;
      updateProductInfo();
    }
  }
  
  // Open product page
  function openProductPage(e) {
    e.stopPropagation();
    if (productsData.length > 0) {
      window.location.href = productsData[currentProductIndex].url;
    }
  }
  
  // Add to cart
  async function addToCart(e) {
    e.stopPropagation();
    const variantId = e.target.dataset.variantId;
    if (!variantId) return;
    
    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items: [{
            id: variantId,
            quantity: 1
          }]
        })
      });
      
      const result = await response.json();
      console.log('Added to cart:', result);
      e.target.textContent = 'Added!';
      setTimeout(() => {
        e.target.textContent = 'Add to Cart';
      }, 2000);
    } catch (error) {
      console.error('Error adding to cart:', error);
      e.target.textContent = 'Error!';
      setTimeout(() => {
        e.target.textContent = 'Add to Cart';
      }, 2000);
    }
  }
  
  // Handle keyboard navigation
  function handleKeyDown(e) {
    if (e.key === 'Escape') {
      closeModal();
    } else if (e.key === 'ArrowLeft') {
      navigateToPrevStory();
    } else if (e.key === 'ArrowRight') {
      navigateToNextStory();
    }
  }
  
  // Handle touch events for swipe navigation
  function handleTouchStart(e) {
    touchStartX = e.changedTouches[0].screenX;
  }
  
  function handleTouchEnd(e) {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }
  
  function handleSwipe() {
    const threshold = 50;
    const difference = touchStartX - touchEndX;
    
    if (difference > threshold) {
      // Swipe left - next story
      navigateToNextStory();
    } else if (difference < -threshold) {
      // Swipe right - previous story
      navigateToPrevStory();
    }
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', loadStories);
</script>

{% schema %}
{
  "name": "Video Stories Slider",
  "target": "section",
  "settings": []
}
{% endschema %}