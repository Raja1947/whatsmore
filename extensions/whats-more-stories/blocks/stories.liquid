{{ 'main.css' | asset_url | stylesheet_tag }}

<style>
  .stories-container {
    display: flex;
    gap: 16px;
    padding: 16px;
    overflow-x: auto;
    flex-wrap: nowrap;
    -webkit-overflow-scrolling: touch;
    margin-bottom: 16px;
  }

  .story-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    width: 150px;
    flex-shrink: 0;
  }

  .story-video {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    overflow: hidden;
    background-color: #ddd;
    position: relative;
    cursor: pointer;
  }

  .story-video video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-info {
    width: 100%;
    text-align: center;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 8px;
    display: none;
  }

  .product-info.visible {
    display: block;
  }

  .product-info img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
    margin-bottom: 8px;
    cursor: pointer;
  }

  #loading-text {
    color: #888;
    font-size: 14px;
  }
</style>

<div class="stories-container" id="stories-container">
  <p id="loading-text">Loading stories...</p>
</div>

<script>
  async function loadStoriesFromProxy() {
    try {
      const res = await fetch('https://impression-steps-belongs-deleted.trycloudflare.com/app/proxy');
      const responseJson = await res.json();
      console.log('API Response:', responseJson);

      const videos = Array.isArray(responseJson) ? responseJson : responseJson.data || [];
      const container = document.getElementById('stories-container');
      document.getElementById('loading-text')?.remove();

      if (videos.length > 0) {
        for (const item of videos) {
          const storyItem = document.createElement('div');
          storyItem.className = 'story-item';

          // Video container
          const videoContainer = document.createElement('div');
          videoContainer.className = 'story-video';

          const video = document.createElement('video');
          video.src = item.url;
          video.autoplay = true;
          video.loop = true;
          video.muted = true;
          video.playsInline = true;

          videoContainer.appendChild(video);
          storyItem.appendChild(videoContainer);

          // Product info container
          const productInfo = document.createElement('div');
          productInfo.className = 'product-info';
          storyItem.appendChild(productInfo);

          // Click handler for video
          videoContainer.addEventListener('click', async () => {
            const isVisible = productInfo.classList.contains('visible');
            document.querySelectorAll('.product-info').forEach((el) => el.classList.remove('visible'));

            if (!isVisible && item.productLinks && item.productLinks.length > 0) {
              try {
                // Show loading state
                productInfo.innerHTML = '<p>Loading products...</p>';
                productInfo.classList.add('visible');
                
                // Fetch all products
                const productPromises = item.productLinks.map(link => 
                  fetchProductByHandle(link.handle).catch(e => {
                    console.error(`Error loading product ${link.handle}:`, e);
                    return null;
                  })
                );
                
                const products = (await Promise.all(productPromises)).filter(Boolean);
                
                if (products.length > 0) {
                  productInfo.innerHTML = products.map(product => `
                    <div class="product-item" style="margin-bottom: 10px;">
                      <img src="${product.featured_image}" alt="${product.title}" 
                           data-product-url="${product.url}" style="cursor: pointer;">
                    
                    </div>
                  `).join('');
                  
                  //add click handler on product to show product details
                  productInfo.querySelectorAll('img').forEach(img => {
                    img.addEventListener('click', (e) => {
                      e.stopPropagation(); 
                      window.location.href = e.target.dataset.productUrl;
                    });
                  });
                } else {
                  productInfo.innerHTML = '<p>No products available</p>';
                }
              } catch (e) {
                console.error('Error loading products:', e);
                productInfo.innerHTML = '<p>Error loading products</p>';
              }
            }
          });

          container.appendChild(storyItem);
        }
      } else {
        container.innerHTML = '<p>No stories found.</p>';
      }
    } catch (err) {
      console.error('Failed to load stories', err);
      document.getElementById('stories-container').innerHTML = '<p>Error loading stories.</p>';
    }
  }

  async function fetchProductByHandle(handle) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error('Product not found');
      const product = await response.json();
      return {
        title: product.title,
        featured_image: product.featured_image || '',
        url: `/products/${handle}`
      };
    } catch (error) {
      console.error(`Error fetching product ${handle}:`, error);
      throw error;
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadStoriesFromProxy);
  } else {
    loadStoriesFromProxy();
  }
</script>

{% schema %}
{
  "name": "stories",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "All Videos",
      "default": "All Videos"
    }
  ]
}
{% endschema %}
