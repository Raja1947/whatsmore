<style>
  /* Floating video player styles */
  .floating-video-container {
    position: fixed;
    bottom: 1%;
    right: 4%;
    width: 250px;
    height: 370px;
    z-index: 100;
    background: white;
    border:1px solid #e0e0e0
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    transition: transform 0.3s ease;
  }

  .floating-video-container:hover {
    transform: scale(1.02);
  }

  .floating-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
  }

  .floating-product-info {
    position: absolute;
    bottom: 0;
    width: 100%;
    text-align: center;
    padding: 8px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 0 0 12px 12px;
    display: none;
    z-index: 10;
  }

  .floating-product-info.visible {
    display: none

  }

  .floating-product-info img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    cursor: pointer;
    border-radius: 4px;
  }

  .floating-video-controls {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 10;
  }

  .floating-mute-btn {
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Modal styles (same as before but included for completeness) */
  .video-modal {
    display: none;
    position: fixed;
    inset: 0;
    z-index: 1000;
    overflow: hidden;
    width: 70%;
    height: 442px;
    margin: auto;
    border: 1px solid #e0e0e0;
  }

  .modal-backdrop {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 999;
    backdrop-filter: blur(5px);
  }

  .modal-content {
    display: flex;
    height: 100%;
    width: 100%;
    background: white;
  }

  .modal-video-container {
    flex-basis: 40%;
    display: flex;
    background: #f5f5f5;
    position: relative;
    flex-direction: column;
  }

  .modal-video {
    width: 100%;
    height: calc(100% - 40px);
    object-fit: cover;
  }

  .modal-products-container {
    flex-basis: 60%;
    overflow-y: scroll;
    display: flex;
    flex-direction: column;
    background: white;
    padding: 15px;
  }

  .close-modal {
    position: absolute;
    top: 20px;
    right: 30px;
    color: #666;
    font-size: 28px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    background: rgba(255, 255, 255, 0.8);
    z-index: 1001;
  }

  .close-modal:hover {
    color: #333;
    background: rgba(255, 255, 255, 0.9);
  }

  .product-details {
    background: white;
    margin-bottom: 20px;
  }

  .product-details:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .product-details h3 {
    font-size: 20px;
    margin: 0 0 10px;
    color: #333;
  }

  .product-details img {
    width: 100%;
    max-height: 200px;
    object-fit: cover;
    margin-bottom: 10px;
  }

  .product-price {
    font-size: 18px;
    font-weight: bold;
    color: #444;
    margin-bottom: 10px;
  }

  .product-description {
    color: #666;
    line-height: 1.6;
    font-size: 14px;
    margin-bottom: 15px;
  }

  .add-to-cart-btn {
    background: #f0f0f0;
    color: #333;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .add-to-cart-btn:hover {
    background: #e0e0e0;
    border-color: #ccc;
  }

  .product-gallery {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    margin-top: 10px;
    padding-bottom: 5px;
  }

  .product-gallery img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
    border: 1px solid #eee;
    transition: all 0.2s;
  }

  .product-gallery img:hover {
    border-color: #ccc;
    transform: scale(1.05);
  }

  .video-controls {
    height: 40px;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    padding: 0 10px;
    position: relative;
  }

  .progress-container {
    flex-grow: 1;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    margin: 0 10px;
    border-radius: 2px;
    cursor: pointer;
  }

  .progress-bar {
    height: 100%;
    background: #fff;
    border-radius: 2px;
    width: 0%;
    position: relative;
  }

  .mute-btn {
    color: white;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 16px;
    padding: 5px;
  }

  .play-pause-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: calc(100% - 40px);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 10;
  }

  .play-pause-overlay.visible {
    opacity: 1;
  }

  .play-pause-icon svg {
    font-size: 5px;
    color: white;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  @media (max-width: 1024px) {
    .video-modal {
      width: 90%;
    }

    .modal-content {
      flex-direction: column;
    }

    .modal-video-container {
      width: 100%;
      flex-basis: auto;
    }

    .modal-products-container {
      width: 100%;
      flex-basis: auto;
    }

    .close-modal {
      top: 10px;
      right: 10px;
      width: 30px;
      height: 30px;
      font-size: 20px;
    }

    .floating-video-container {
      width: 250px;
      height: 350px;
      right: 10px;
      bottom: 10px;
    }
  }

  @media (max-width: 768px) {
    .floating-video-container {
      width: 200px;
      height: 300px;
    }
  }
</style>

<!-- Floating Video Container -->
<div class="floating-video-container" id="floatingVideoContainer">
  <div class="floating-video-controls">
    <button class="floating-mute-btn" id="floatingMuteBtn">ðŸ”Š</button>
  </div>
  <video class="floating-video" id="floatingVideo"></video>
  <div class="floating-product-info" id="floatingProductInfo"></div>
</div>

<!-- Modal Backdrop -->
<div class="modal-backdrop" id="modalBackdrop"></div>

<!-- Modal Structure -->
<div class="video-modal" id="videoModal">
  <span class="close-modal">&times;</span>
  <div class="modal-content">
    <div class="modal-video-container">
      <video class="modal-video"></video>
      <div class="play-pause-overlay">
        <div class="play-pause-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
          </svg>
        </div>
      </div>
      <div class="video-controls">
        <button class="mute-btn">ðŸ”Š</button>
        <div class="progress-container">
          <div class="progress-bar"></div>
        </div>
      </div>
    </div>
    <div class="modal-products-container" id="modalProducts">
      <!-- Product details will be loaded here -->
    </div>
  </div>
</div>

<script>
  let allVideos = [];
  let currentVideoIndex = 0;
  let currentProductsData = [];
  let productVisibleTimeout = null;

  async function loadStoriesFromProxy() {
    try {
      const res = await fetch('https://booth-telephony-sacred-nearly.trycloudflare.com/app/proxy');
      const responseJson = await res.json();
      console.log('API Response:', responseJson);

      allVideos = Array.isArray(responseJson) ? responseJson : responseJson.data || [];
      
      if (allVideos.length > 0) {
        // Start playing the first video
        playNextVideo();
      } else {
        document.getElementById('floatingVideoContainer').style.display = 'none';
      }
    } catch (err) {
      console.error('Failed to load stories', err);
      document.getElementById('floatingVideoContainer').style.display = 'none';
    }
  }

  async function playNextVideo() {
    if (currentVideoIndex >= allVideos.length) {
      currentVideoIndex = 0; // Loop back to the first video
    }

    const videoData = allVideos[currentVideoIndex];
    const floatingVideo = document.getElementById('floatingVideo');
    const floatingProductInfo = document.getElementById('floatingProductInfo');
    
    // Reset product info
    floatingProductInfo.classList.remove('visible');
    floatingProductInfo.innerHTML = '';
    currentProductsData = [];
    
    // Set video source
    floatingVideo.src = videoData.url;
    floatingVideo.muted = true;
    floatingVideo.loop = false;
    
    // Load product data if available
    if (videoData.productLinks && videoData.productLinks.length > 0) {
      const productPromises = videoData.productLinks.map(async (link) => {
        try {
          const product = await fetchProductByHandle(link.handle);
          return {
            ...product,
            timestamp: link.timestamp,
            duration: 3, // Show each product for 3 seconds by default
          };
        } catch (e) {
          console.error(`Error loading product ${link.handle}:`, e);
          return null;
        }
      });

      currentProductsData = (await Promise.all(productPromises)).filter(Boolean);
      currentProductsData.sort((a, b) => a.timestamp - b.timestamp); // Sort by timestamp
    }

    // Play the video
    floatingVideo.play().catch(e => console.log('Autoplay prevented:', e));
    
    // Set up event listeners for this video
    setupVideoListeners(floatingVideo, floatingProductInfo, videoData);
    
    // Move to next video when this one ends
    floatingVideo.onended = () => {
      currentVideoIndex++;
      playNextVideo();
    };
  }

  function setupVideoListeners(videoElement, productInfoElement, videoData) {
    // Timeupdate listener for product display
    videoElement.addEventListener('timeupdate', () => {
      const currentTime = videoElement.currentTime;
      let showIndex = -1;

      // Find which product should be shown based on current time
      for (let i = 0; i < currentProductsData.length; i++) {
        if (
          currentTime >= currentProductsData[i].timestamp &&
          currentTime < currentProductsData[i].timestamp + currentProductsData[i].duration
        ) {
          showIndex = i;
          break;
        }
      }

      // If we found a product to show
      if (showIndex !== -1) {
        const product = currentProductsData[showIndex];
        
        productInfoElement.innerHTML = `
          <div class="product-item" style="margin-bottom: 10px;">
            <img src="${product.featured_image}" alt="${product.title}" 
                 data-product-url="${product.url}" />
            <div>
              <p style="margin: 5px 0 0;"><strong>${product.title}</strong></p>
              <div class="info-price">
                <p style="margin: 0 0 5px;">$${product.price}</p>
                <button class="add-to-cart-btn" 
                        data-variant-id="${product.variantId}" 
                        style="padding: 6px 10px; background: #f0f0f0; color: #333; border: 1px solid #ddd; cursor: pointer; border-radius: 4px;">
                  Add to Cart
                </button>
              </div>
            </div>
          </div>
        `;

        productInfoElement.classList.add('visible');

        // Clear any previous timeout
        if (productVisibleTimeout) {
          clearTimeout(productVisibleTimeout);
        }

        // Set timeout to hide the product after its duration
        productVisibleTimeout = setTimeout(() => {
          productInfoElement.classList.remove('visible');
        }, currentProductsData[showIndex].duration * 1000);

        // Set up event listeners for the new elements
        productInfoElement.querySelector('img').addEventListener('click', (e) => {
          e.stopPropagation();
          window.location.href = e.target.dataset.productUrl;
        });

        productInfoElement.querySelector('.add-to-cart-btn').addEventListener('click', async (e) => {
          e.stopPropagation();
          const variantId = e.target.dataset.variantId;
          try {
            const res = await fetch('/cart/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
              },
              body: JSON.stringify({
                items: [
                  {
                    id: variantId,
                    quantity: 1,
                  },
                ],
              }),
            });
            const result = await res.json();
            console.log('Added to cart:', result);
            e.target.innerText = 'Added!';
            setTimeout(() => (e.target.innerText = 'Add to Cart'), 2000);
          } catch (err) {
            console.error('Error adding to cart:', err);
            e.target.innerText = 'Error!';
          }
        });
      } else if (showIndex === -1 && productInfoElement.classList.contains('visible')) {
        // Hide product info if we passed all timestamps
        productInfoElement.classList.remove('visible');
        if (productVisibleTimeout) {
          clearTimeout(productVisibleTimeout);
          productVisibleTimeout = null;
        }
      }
    });

    // Click event to open modal
    videoElement.addEventListener('click', () => {
      openModal(videoData.url, currentProductsData);
    });
  }

  async function fetchProductByHandle(handle) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error('Product not found');
      const product = await response.json();

      const firstVariant = product.variants?.[0];

      return {
        title: product.title,
        featured_image: product.featured_image || '',
        url: `/products/${handle}`,
        price: (firstVariant?.price / 100).toFixed(2),
        variantId: firstVariant?.id,
        description: product.description,
        images: product.images || [],
        handle: handle,
      };
    } catch (error) {
      console.error(`Error fetching product ${handle}:`, error);
      throw error;
    }
  }

  // Modal functions (same as before)
  function openModal(videoUrl, productsData) {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');
    const modalProducts = document.getElementById('modalProducts');
    const progressBar = modal.querySelector('.progress-bar');
    const muteBtn = modal.querySelector('.mute-btn');
    const progressContainer = modal.querySelector('.progress-container');
    const playPauseOverlay = modal.querySelector('.play-pause-overlay');
    const playPauseIcon = modal.querySelector('.play-pause-icon');

    // Pause the floating video
    const floatingVideo = document.getElementById('floatingVideo');
    floatingVideo.pause();

    // Show backdrop
    backdrop.style.display = 'block';

    // Set video source
    modalVideo.src = videoUrl;
    modalVideo.muted = true; 
    modalVideo.controls = false; 

    // Load product details
    modalProducts.innerHTML = '';

    if (productsData && productsData.length > 0) {
      productsData.forEach((product) => {
        const productElement = document.createElement('div');
        productElement.className = 'product-details';

        let galleryHTML = '';
        if (product.images && product.images.length > 1) {
          galleryHTML = `
            <div class="product-gallery">
              ${product.images.map((img) => `<img src="${img}" alt="${product.title}" />`).join('')}
            </div>
          `;
        }

        productElement.innerHTML = `
          <img src="${product.featured_image}" alt="${product.title}" />
          ${galleryHTML}
          <h3>${product.title}</h3>
          <div class="product-price">$${product.price}</div>
          <div class="product-description">${product.description}</div>
          <button class="add-to-cart-btn" 
                  data-variant-id="${product.variantId}">
            Add to Cart
          </button>
        `;

        productElement.querySelector('.add-to-cart-btn').addEventListener('click', async (e) => {
          e.stopPropagation();
          const variantId = e.target.dataset.variantId;
          try {
            const res = await fetch('/cart/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
              },
              body: JSON.stringify({
                items: [
                  {
                    id: variantId,
                    quantity: 1,
                  },
                ],
              }),
            });
            const result = await res.json();
            console.log('Added to cart:', result);
            e.target.innerText = 'Added!';
            setTimeout(() => (e.target.innerText = 'Add to Cart'), 2000);
          } catch (err) {
            console.error('Error adding to cart:', err);
            e.target.innerText = 'Error!';
          }
        });

        if (galleryHTML) {
          const mainImage = productElement.querySelector('img');
          const galleryImages = productElement.querySelectorAll('.product-gallery img');

          galleryImages.forEach((img) => {
            img.addEventListener('click', () => {
              mainImage.src = img.src;
            });
          });
        }

        modalProducts.appendChild(productElement);
      });
    } else {
      modalProducts.innerHTML =
        '<p style="color: #666; padding: 20px; text-align: center;">No products associated with this video.</p>';
    }

    // Show modal
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';

    // Play video when modal opens
    modalVideo
      .play()
      .then(() => {
        playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`;
      })
      .catch((e) => console.log('Autoplay prevented:', e));

    function updateProgressBar() {
      if (modalVideo.duration) {
        const percent = (modalVideo.currentTime / modalVideo.duration) * 100;
        progressBar.style.width = `${percent}%`;
      }
    }

    modalVideo.addEventListener('timeupdate', updateProgressBar);

    progressContainer.addEventListener('click', (e) => {
      const rect = progressContainer.getBoundingClientRect();
      const pos = (e.clientX - rect.left) / rect.width;
      modalVideo.currentTime = pos * modalVideo.duration;
      updateProgressBar();
    });

    muteBtn.addEventListener('click', () => {
      modalVideo.muted = !modalVideo.muted;
      muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
    });

    function togglePlayPause() {
      if (modalVideo.paused) {
        modalVideo.play().then(() => {
          playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`;
          showPlayPauseOverlay();
        });
      } else {
        modalVideo.pause();
        playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
</svg>`;
        showPlayPauseOverlay();
      }
    }

    function showPlayPauseOverlay() {
      playPauseOverlay.classList.add('visible');
      setTimeout(() => {
        playPauseOverlay.classList.remove('visible');
      }, 500);
    }

    modalVideo.addEventListener('click', togglePlayPause);
    muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
  }

  // Close modal when clicking the X
  document.querySelector('.close-modal').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');
    const floatingVideo = document.getElementById('floatingVideo');

    modalVideo.pause();
    modal.style.display = 'none';
    backdrop.style.display = 'none';
    document.body.style.overflow = 'auto';
    
    // Resume the floating video
    floatingVideo.play().catch(e => console.log('Autoplay prevented:', e));
  });

  // Close modal when clicking on backdrop
  document.getElementById('modalBackdrop').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const modalVideo = modal.querySelector('.modal-video');
    const floatingVideo = document.getElementById('floatingVideo');

    modalVideo.pause();
    modal.style.display = 'none';
    this.style.display = 'none';
    document.body.style.overflow = 'auto';
    
    // Resume the floating video
    floatingVideo.play().catch(e => console.log('Autoplay prevented:', e));
  });

  // Mute button for floating video
  document.getElementById('floatingMuteBtn').addEventListener('click', function() {
    const floatingVideo = document.getElementById('floatingVideo');
    floatingVideo.muted = !floatingVideo.muted;
    this.textContent = floatingVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
  });

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadStoriesFromProxy);
  } else {
    loadStoriesFromProxy();
  }
</script>

{% schema %}
{
  "name": "Floating Video Player",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Floating Video Player",
      "default": "Floating Video Player"
    }
  ]
}
{% endschema %}