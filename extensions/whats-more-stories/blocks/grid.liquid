{{ 'grid.css' | asset_url | stylesheet_tag }}

<!-- Grid Video Player Container -->
<div class="video-grid-container">
  <h2 class="video-grid-title">Shop Our Videos</h2>
  <div class="video-grid" id="videoGrid">
    <!-- Videos will be loaded here dynamically -->
  </div>
</div>

<!-- Modal Backdrop -->
<div class="modal-backdrop" id="modalBackdrop"></div>

<!-- Modal Structure -->
<div class="video-modal" id="videoModal">
  <span class="close-modal">&times;</span>
  <div class="modal-content">
    <div class="modal-video-container">
      <video class="modal-video"></video>
      <div class="play-pause-overlay">
        <div class="play-pause-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
          </svg>
        </div>
      </div>
      <div class="video-controls">
        <button class="mute-btn">ðŸ”Š</button>
        <div class="progress-container">
          <div class="progress-bar"></div>
        </div>
      </div>
    </div>
    <div class="modal-products-container" id="modalProducts">
      <!-- Product details will be loaded here -->
    </div>
  </div>
</div>

<script>
  let allVideos = [];
  let currentProductsData = [];

  async function loadVideosFromProxy() {
    try {
      const res = await fetch('https://older-vatican-differential-ind.trycloudflare.com/app/proxy');
      const responseJson = await res.json();
      console.log('API Response:', responseJson);

      allVideos = Array.isArray(responseJson) ? responseJson : responseJson.data || [];
      
      if (allVideos.length > 0) {
        renderVideoGrid();
      } else {
        document.getElementById('videoGrid').innerHTML = '<p>No videos available</p>';
      }
    } catch (err) {
      console.error('Failed to load videos', err);
      document.getElementById('videoGrid').innerHTML = '<p>Error loading videos</p>';
    }
  }

  async function renderVideoGrid() {
    const videoGrid = document.getElementById('videoGrid');
    videoGrid.innerHTML = '';

    for (const videoData of allVideos) {
      const videoCard = document.createElement('div');
      videoCard.className = 'video-card';
      
      // Check if video has associated products
      const hasProducts = videoData.productLinks && videoData.productLinks.length > 0;
      
      videoCard.innerHTML = `
        <video preload="auto" muted loop playsinline autoplay>
          <source src="${videoData.url}" type="video/mp4">
        </video>
        <div class="video-card-controls">
          <button class="video-card-mute-btn">ðŸ”‡</button>
          {% comment %} <span class="video-card-duration">${formatDuration(videoData.duration || 0)}</span> {% endcomment %}
        </div>
        ${hasProducts ? '<div class="video-card-product-tag">See Products</div>' : ''}
      `;
      
      videoGrid.appendChild(videoCard);
      
      // Set up event listeners for this card
      const videoElement = videoCard.querySelector('video');
      const muteBtn = videoCard.querySelector('.video-card-mute-btn');
      
      // Load product data if available
      let productsData = [];
      if (hasProducts) {
        productsData = await loadProductsForVideo(videoData.productLinks);
      }
      
      // Click to open modal
      videoCard.addEventListener('click', () => {
        openModal(videoData.url, productsData);
      });
      
      // Mute button
      muteBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        videoElement.muted = !videoElement.muted;
        muteBtn.textContent = videoElement.muted ? 'ðŸ”‡' : 'ðŸ”Š';
      });
      
      // Try to autoplay the video
      const playPromise = videoElement.play();
      
      if (playPromise !== undefined) {
        playPromise.catch(error => {
          // Autoplay was prevented, show a play button overlay
          console.log('Autoplay prevented, showing fallback UI');
          videoElement.controls = true;
          videoElement.muted = false;
        });
      }
    }
  }

  async function loadProductsForVideo(productLinks) {
    const products = [];
    
    for (const link of productLinks) {
      try {
        const product = await fetchProductByHandle(link.handle);
        products.push({
          ...product,
          timestamp: link.timestamp,
          duration: 3, // Show each product for 3 seconds by default
        });
      } catch (e) {
        console.error(`Error loading product ${link.handle}:`, e);
      }
    }
    
    return products.sort((a, b) => a.timestamp - b.timestamp); // Sort by timestamp
  }

  async function fetchProductByHandle(handle) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error('Product not found');
      const product = await response.json();

      const firstVariant = product.variants?.[0];

      return {
        title: product.title,
        featured_image: product.featured_image || '',
        url: `/products/${handle}`,
        price: (firstVariant?.price / 100).toFixed(2),
        variantId: firstVariant?.id,
        description: product.description,
        images: product.images || [],
        handle: handle,
      };
    } catch (error) {
      console.error(`Error fetching product ${handle}:`, error);
      throw error;
    }
  }

  function formatDuration(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  }

  function openModal(videoUrl, productsData) {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');
    const modalProducts = document.getElementById('modalProducts');
    const progressBar = modal.querySelector('.progress-bar');
    const muteBtn = modal.querySelector('.mute-btn');
    const progressContainer = modal.querySelector('.progress-container');
    const playPauseOverlay = modal.querySelector('.play-pause-overlay');
    const playPauseIcon = modal.querySelector('.play-pause-icon');

    // Show backdrop
    backdrop.style.display = 'block';

    // Set video source
    modalVideo.src = videoUrl;
    modalVideo.muted = true; 
    modalVideo.controls = false; 

    // Load product details
    modalProducts.innerHTML = '';

    if (productsData && productsData.length > 0) {
      productsData.forEach((product) => {
        const productElement = document.createElement('div');
        productElement.className = 'product-details';

        let galleryHTML = '';
        if (product.images && product.images.length > 1) {
          galleryHTML = `
            <div class="product-gallery">
              ${product.images.map((img) => `<img src="${img}" alt="${product.title}" />`).join('')}
            </div>
          `;
        }

        productElement.innerHTML = `
          <img src="${product.featured_image}" alt="${product.title}" />
          ${galleryHTML}
          <h3>${product.title}</h3>
          <div class="product-price">$${product.price}</div>
          <div class="product-description">${product.description}</div>
          <button class="add-to-cart-btn" 
                  data-variant-id="${product.variantId}">
            Add to Cart
          </button>
        `;

        productElement.querySelector('.add-to-cart-btn').addEventListener('click', async (e) => {
          e.stopPropagation();
          const variantId = e.target.dataset.variantId;
          try {
            const res = await fetch('/cart/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
              },
              body: JSON.stringify({
                items: [
                  {
                    id: variantId,
                    quantity: 1,
                  },
                ],
              }),
            });
            const result = await res.json();
            console.log('Added to cart:', result);
            e.target.innerText = 'Added!';
            setTimeout(() => (e.target.innerText = 'Add to Cart'), 2000);
          } catch (err) {
            console.error('Error adding to cart:', err);
            e.target.innerText = 'Error!';
          }
        });

        if (galleryHTML) {
          const mainImage = productElement.querySelector('img');
          const galleryImages = productElement.querySelectorAll('.product-gallery img');

          galleryImages.forEach((img) => {
            img.addEventListener('click', () => {
              mainImage.src = img.src;
            });
          });
        }

        modalProducts.appendChild(productElement);
      });
    } else {
      modalProducts.innerHTML =
        '<p style="color: #666; padding: 20px; text-align: center;">No products associated with this video.</p>';
    }

    // Show modal
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';

    // Play video when modal opens
    modalVideo
      .play()
      .then(() => {
        playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`;
      })
      .catch((e) => console.log('Autoplay prevented:', e));

    function updateProgressBar() {
      if (modalVideo.duration) {
        const percent = (modalVideo.currentTime / modalVideo.duration) * 100;
        progressBar.style.width = `${percent}%`;
      }
    }

    modalVideo.addEventListener('timeupdate', updateProgressBar);

    progressContainer.addEventListener('click', (e) => {
      const rect = progressContainer.getBoundingClientRect();
      const pos = (e.clientX - rect.left) / rect.width;
      modalVideo.currentTime = pos * modalVideo.duration;
      updateProgressBar();
    });

    muteBtn.addEventListener('click', () => {
      modalVideo.muted = !modalVideo.muted;
      muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
    });

    function togglePlayPause() {
      if (modalVideo.paused) {
        modalVideo.play().then(() => {
          playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`;
          showPlayPauseOverlay();
        });
      } else {
        modalVideo.pause();
        playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
</svg>`;
        showPlayPauseOverlay();
      }
    }

    function showPlayPauseOverlay() {
      playPauseOverlay.classList.add('visible');
      setTimeout(() => {
        playPauseOverlay.classList.remove('visible');
      }, 500);
    }

    modalVideo.addEventListener('click', togglePlayPause);
    muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
  }

  // Close modal when clicking the X
  document.querySelector('.close-modal').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');

    modalVideo.pause();
    modal.style.display = 'none';
    backdrop.style.display = 'none';
    document.body.style.overflow = 'auto';
  });

  // Close modal when clicking on backdrop
  document.getElementById('modalBackdrop').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const modalVideo = modal.querySelector('.modal-video');

    modalVideo.pause();
    modal.style.display = 'none';
    this.style.display = 'none';
    document.body.style.overflow = 'auto';
  });

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadVideosFromProxy);
  } else {
    loadVideosFromProxy();
  }
</script>

{% schema %}
{
"name":"Grid",
"target":"section",
"settings":[
    {
    "type":"text",
    "id":"title",
    "label":"Title",
    "default":"Grid"
    }
]
}
{% endschema %}