{{ 'collection.css' | asset_url | stylesheet_tag }}

<div class="stories-container" id="stories-container">
  <p id="loading-text">Loading stories...</p>
</div>

<!-- Modal Backdrop -->
<div class="modal-backdrop" id="modalBackdrop"></div>

<!-- Modal Structure -->
<div class="video-modal" id="videoModal">
  <span class="close-modal">&times;</span>
  <div class="modal-content">
    <div class="modal-video-container">
      <video class="modal-video"></video>
      <div class="play-pause-overlay">
        <div class="play-pause-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
</svg>
{% comment %} //play-icon {% endcomment %}
        </div>
      </div>
      <div class="video-controls">
        <button class="mute-btn">ðŸ”Š</button>
        <div class="progress-container">
          <div class="progress-bar"></div>
        </div>
      </div>
    </div>
    <div class="modal-products-container" id="modalProducts">
      <!-- Product details will be loaded here -->
    </div>
  </div>
</div>

<script>
  async function loadStoriesFromProxy() {
    try {
      const res = await fetch('https://grove-earliest-decent-md.trycloudflare.com/app/proxy');
      const responseJson = await res.json();
      console.log('API Response:', responseJson);

      const videos = Array.isArray(responseJson) ? responseJson : responseJson.data || [];
      const container = document.getElementById('stories-container');
      document.getElementById('loading-text')?.remove();

      if (videos.length > 0) {
        for (const item of videos) {
          const storyItem = document.createElement('div');
          storyItem.className = 'story-item';

          const videoContainer = document.createElement('div');
          videoContainer.className = 'story-video';

          const video = document.createElement('video');
          video.src = item.url;
          video.autoplay = true;
          video.loop = true;
          video.muted = true;
          video.playsInline = true;

          const productInfo = document.createElement('div');
          productInfo.className = 'product-info';
          videoContainer.appendChild(productInfo);

          // Store product data and timestamps
          let productsData = [];
          let currentProductIndex = -1;
          let productVisibleTimeout = null;

          if (item.productLinks && item.productLinks.length > 0) {
            // Load product data
            const productPromises = item.productLinks.map(async (link) => {
              try {
                const product = await fetchProductByHandle(link.handle);
                return {
                  ...product,
                  timestamp: link.timestamp,
                  duration: 3, // 3 seconds by default
                };
              } catch (e) {
                console.error(`Error loading product ${link.handle}:`, e);
                return null;
              }
            });

            productsData = (await Promise.all(productPromises)).filter(Boolean);
            productsData.sort((a, b) => a.timestamp - b.timestamp); // Sort by timestamp

            // Set up timeupdate listener
            video.addEventListener('timeupdate', () => {
              const currentTime = video.currentTime;
              let showIndex = -1; //means no product to show

              // Find which product should be shown based on current time
              for (let i = 0; i < productsData.length; i++) {
                if (
                  currentTime >= productsData[i].timestamp &&
                  currentTime < productsData[i].timestamp + productsData[i].duration
                ) {
                  showIndex = i;
                  break;
                }
              }

              // If we found a product to show and it's different from current one
              if (showIndex !== -1 && showIndex !== currentProductIndex) {
                currentProductIndex = showIndex;
                const product = productsData[showIndex];

                productInfo.innerHTML = `
                  <div class="product-item" style="margin-bottom: 10px;">
                    <img src="${product.featured_image}" alt="${product.title}" 
                         data-product-url="${product.url}" />
                    <div>
                      <p style="margin: 5px 0 0;"><strong>${product.title}</strong></p>
                      <div class="info-price">
                        <p style="margin: 0 0 5px;">$${product.price}</p>
                        <button class="add-to-cart-btn" 
                                data-variant-id="${product.variantId}" 
                                style="padding: 6px 10px; background: #f0f0f0; color: #333; border: 1px solid #ddd; cursor: pointer; border-radius: 4px;">
                          Add to Cart
                        </button>
                      </div>
                    </div>
                  </div>
                `;

                productInfo.classList.add('visible');

                // Clear any previous timeout
                if (productVisibleTimeout) {
                  clearTimeout(productVisibleTimeout);
                }

                // Set timeout to hide the product after its duration
                productVisibleTimeout = setTimeout(() => {
                  productInfo.classList.remove('visible');
                  currentProductIndex = -1;
                }, productsData[showIndex].duration * 1000);

                // Set up event listeners for the new elements
                productInfo.querySelector('img').addEventListener('click', (e) => {
                  e.stopPropagation();
                  window.location.href = e.target.dataset.productUrl;
                });

                productInfo.querySelector('.add-to-cart-btn').addEventListener('click', async (e) => {
                  e.stopPropagation();
                  const variantId = e.target.dataset.variantId;
                  try {
                    const res = await fetch('/cart/add', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json',
                      },
                      body: JSON.stringify({
                        items: [
                          {
                            id: variantId,
                            quantity: 1,
                          },
                        ],
                      }),
                    });
                    const result = await res.json();
                    console.log('Added to cart:', result);
                    e.target.innerText = 'Added!';
                    setTimeout(() => (e.target.innerText = 'Add to Cart'), 2000);
                  } catch (err) {
                    console.error('Error adding to cart:', err);
                    e.target.innerText = 'Error!';
                  }
                });
              } else if (showIndex === -1 && currentProductIndex !== -1) {
                // Hide product info if we passed all timestamps
                currentProductIndex = -1;
                productInfo.classList.remove('visible');
                if (productVisibleTimeout) {
                  clearTimeout(productVisibleTimeout);
                  productVisibleTimeout = null;
                }
              }
            });
          }

          // When video ends, hide any visible product
          video.addEventListener('ended', () => {
            productInfo.classList.remove('visible');
            currentProductIndex = -1;
            if (productVisibleTimeout) {
              clearTimeout(productVisibleTimeout);
              productVisibleTimeout = null;
            }
          });

          // Add click event to open modal
          videoContainer.addEventListener('click', () => {
            openModal(item.url, productsData);
          });

          videoContainer.appendChild(video);
          storyItem.appendChild(videoContainer);
          container.appendChild(storyItem);
        }
      } else {
        container.innerHTML = '<p>No stories found.</p>';
      }
    } catch (err) {
      console.error('Failed to load stories', err);
      document.getElementById('stories-container').innerHTML = '<p>Error loading stories.</p>';
    }
  }

  async function fetchProductByHandle(handle) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error('Product not found');
      const product = await response.json();

      const firstVariant = product.variants?.[0];

      return {
        title: product.title,
        featured_image: product.featured_image || '',
        url: `/products/${handle}`,
        price: (firstVariant?.price / 100).toFixed(2),
        variantId: firstVariant?.id,
        description: product.description,
        images: product.images || [],
        handle: handle,
      };
    } catch (error) {
      console.error(`Error fetching product ${handle}:`, error);
      throw error;
    }
  }

  // Modal functions
  function openModal(videoUrl, productsData) {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');
    const modalProducts = document.getElementById('modalProducts');
    const progressBar = modal.querySelector('.progress-bar');
    const muteBtn = modal.querySelector('.mute-btn');
    const progressContainer = modal.querySelector('.progress-container');
    const playPauseOverlay = modal.querySelector('.play-pause-overlay');
    const playPauseIcon = modal.querySelector('.play-pause-icon');

    // Show backdrop
    backdrop.style.display = 'block';

    // Set video source
    modalVideo.src = videoUrl;
    modalVideo.muted = true; 
    modalVideo.controls = false; 

    // Load product details
    modalProducts.innerHTML = '';

    if (productsData && productsData.length > 0) {
      // Create product elements for each product
      productsData.forEach((product) => {
        const productElement = document.createElement('div');
        productElement.className = 'product-details';

        // Create gallery of product images
        let galleryHTML = '';
        if (product.images && product.images.length > 1) {
          galleryHTML = `
            <div class="product-gallery">
              ${product.images.map((img) => `<img src="${img}" alt="${product.title}" />`).join('')}
            </div>
          `;
        }

        productElement.innerHTML = `
          <img src="${product.featured_image}" alt="${product.title}" />
          ${galleryHTML}
          <h3>${product.title}</h3>
          <div class="product-price">$${product.price}</div>
          <div class="product-description">${product.description}</div>
          <button class="add-to-cart-btn" 
                  data-variant-id="${product.variantId}">
            Add to Cart
          </button>
        `;

        // Add click event for add to cart button
        productElement.querySelector('.add-to-cart-btn').addEventListener('click', async (e) => {
          e.stopPropagation();
          const variantId = e.target.dataset.variantId;
          try {
            const res = await fetch('/cart/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
              },
              body: JSON.stringify({
                items: [
                  {
                    id: variantId,
                    quantity: 1,
                  },
                ],
              }),
            });
            const result = await res.json();
            console.log('Added to cart:', result);
            e.target.innerText = 'Added!';
            setTimeout(() => (e.target.innerText = 'Add to Cart'), 2000);
          } catch (err) {
            console.error('Error adding to cart:', err);
            e.target.innerText = 'Error!';
          }
        });

        // Add click events for gallery images
        if (galleryHTML) {
          const mainImage = productElement.querySelector('img');
          const galleryImages = productElement.querySelectorAll('.product-gallery img');

          galleryImages.forEach((img) => {
            img.addEventListener('click', () => {
              mainImage.src = img.src;
            });
          });
        }

        modalProducts.appendChild(productElement);
      });
    } else {
      modalProducts.innerHTML =
        '<p style="color: #666; padding: 20px; text-align: center;">No products associated with this video.</p>';
    }

    // Show modal
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';

    // Play video when modal opens
    modalVideo
      .play()
      .then(() => {
        playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`
; // Pause icon
      })
      .catch((e) => console.log('Autoplay prevented:', e));

    // Update progress bar as video plays
    function updateProgressBar() {
      if (modalVideo.duration) {
        const percent = (modalVideo.currentTime / modalVideo.duration) * 100;
        progressBar.style.width = `${percent}%`;
      }
    }

    modalVideo.addEventListener('timeupdate', updateProgressBar);

    // Click on progress bar to seek
    progressContainer.addEventListener('click', (e) => {
      const rect = progressContainer.getBoundingClientRect();
      const pos = (e.clientX - rect.left) / rect.width;
      modalVideo.currentTime = pos * modalVideo.duration;
      updateProgressBar();
    });

    // Toggle mute
    muteBtn.addEventListener('click', () => {
      modalVideo.muted = !modalVideo.muted;
      muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
    });

    // Click on video to play/pause
    function togglePlayPause() {
      if (modalVideo.paused) {
        modalVideo.play().then(() => {
          playPauseIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
</svg>`
; // Pause icon
          showPlayPauseOverlay();
        });
      } else {
        modalVideo.pause();
        playPauseIcon.innerHTML =`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
</svg>`
; // Play icon
        showPlayPauseOverlay();
      }
    }

    function showPlayPauseOverlay() {
      playPauseOverlay.classList.add('visible');
      setTimeout(() => {
        playPauseOverlay.classList.remove('visible');
      }, 500);
    }

    modalVideo.addEventListener('click', togglePlayPause);

    // Update mute button based on initial state
    muteBtn.textContent = modalVideo.muted ? 'ðŸ”‡' : 'ðŸ”Š';
  }

  // Close modal when clicking the X
  document.querySelector('.close-modal').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const backdrop = document.getElementById('modalBackdrop');
    const modalVideo = modal.querySelector('.modal-video');

    modalVideo.pause();
    modal.style.display = 'none';
    backdrop.style.display = 'none';
    document.body.style.overflow = 'auto';
  });

  // Close modal when clicking on backdrop
  document.getElementById('modalBackdrop').addEventListener('click', function () {
    const modal = document.getElementById('videoModal');
    const modalVideo = modal.querySelector('.modal-video');

    modalVideo.pause();
    modal.style.display = 'none';
    this.style.display = 'none';
    document.body.style.overflow = 'auto';
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadStoriesFromProxy);
  } else {
    loadStoriesFromProxy();
  }
</script>

{% schema %}
{
  "name": "Collection Videos",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "All Videos",
      "default": "All Videos"
    }
  ]
}
{% endschema %}